<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
int CPU1_C;
chan CPU1_use, CPU1_done;
int CPU2_C;
chan CPU2_use, CPU2_done;
int done_counter;
clock y;
bool flagA=false, flagB=false, flagC=false, flagD=false, flagE=false;
bool flag = true;</declaration><template><name x="5" y="5">CPU</name><parameter>chan &amp;use, chan &amp;done, int &amp;C</parameter><declaration>// Place local declarations here.
clock x;

</declaration><location id="id0" x="8" y="-8"><name x="-8" y="-40">InUse</name><label kind="invariant" x="-24" y="8">x &lt;= C</label></location><location id="id1" x="8" y="-120"><name x="-2" y="-150">Idle</name></location><init ref="id1"/><transition><source ref="id1"/><target ref="id0"/><label kind="synchronisation" x="72" y="-96">use?</label><label kind="assignment" x="72" y="-72">x := 0</label><nail x="64" y="-120"/><nail x="64" y="-8"/></transition><transition><source ref="id0"/><target ref="id1"/><label kind="guard" x="-112" y="-88">x == C</label><label kind="synchronisation" x="-104" y="-72">done!</label><nail x="-56" y="-8"/><nail x="-56" y="-120"/></transition></template><template><name>Job</name><parameter>int C1, int C2, bool &amp;f1, bool &amp;f2, bool &amp;self</parameter><location id="id2" x="40" y="-176"><name x="30" y="-206">Waiting</name></location><location id="id3" x="40" y="128"><name x="24" y="144">Done</name></location><location id="id4" x="152" y="24"><name x="168" y="16">CPU2_executing</name></location><location id="id5" x="-64" y="24"><name x="-200" y="16">CPU1_executing</name></location><location id="id6" x="40" y="-80"><name x="56" y="-96">Ready</name></location><init ref="id2"/><transition><source ref="id2"/><target ref="id6"/><label kind="guard" x="-20" y="-158">f1 &amp; f2</label></transition><transition><source ref="id5"/><target ref="id3"/><label kind="synchronisation" x="-136" y="72">CPU1_done?</label><label kind="assignment" x="-128" y="96">done_counter++,
self = true</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="synchronisation" x="152" y="72">CPU2_done?</label><label kind="assignment" x="112" y="96">done_counter++,
self = true</label></transition><transition><source ref="id6"/><target ref="id4"/><label kind="synchronisation" x="96" y="-64">CPU2_use!</label><label kind="assignment" x="128" y="-40">CPU2_C=C2</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="-72" y="-72">CPU1_use!</label><label kind="assignment" x="-112" y="-48">CPU1_C=C1</label></transition></template><system>// Place template instantiations here.
CPU1 = CPU(CPU1_use, CPU1_done, CPU1_C);
CPU2 = CPU(CPU2_use, CPU2_done, CPU2_C);

JobA = Job(3, 4, flag, flag, flagA);
JobB = Job(3, 2, flag, flag, flagB);
JobC = Job(6, 5, flagA, flagB, flagC);
JobD = Job(3, 3, flagB, flag, flagD);
JobE = Job(2, 1, flagD, flag, flagE);

// List one or more processes to be composed into a system.
system JobA, JobB, JobC, JobD, JobE, CPU1, CPU2;</system></nta>