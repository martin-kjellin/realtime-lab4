<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
int CPU1_C;
chan CPU1_use, CPU1_done;
int CPU2_C;
chan CPU2_use, CPU2_done;
int done_counter;
clock y;
bool flagA=false, flagB=false, flagC=false, flagD=false, flagE=false;
bool flagF=false, flagG=false, flagH=false, flagI=false;
bool flag = true;</declaration><template><name x="5" y="5">CPU</name><parameter>chan &amp;use, chan &amp;done, int &amp;C</parameter><declaration>// Place local declarations here.
clock x;

</declaration><location id="id0" x="8" y="-8"><name x="-8" y="-40">InUse</name><label kind="invariant" x="-24" y="8">x &lt;= C</label></location><location id="id1" x="8" y="-120"><name x="-2" y="-150">Idle</name></location><init ref="id1"/><transition><source ref="id1"/><target ref="id0"/><label kind="synchronisation" x="72" y="-96">use?</label><label kind="assignment" x="72" y="-72">x := 0</label><nail x="64" y="-120"/><nail x="64" y="-8"/></transition><transition><source ref="id0"/><target ref="id1"/><label kind="guard" x="-112" y="-88">x == C</label><label kind="synchronisation" x="-104" y="-72">done!</label><nail x="-56" y="-8"/><nail x="-56" y="-120"/></transition></template><template><name>Job</name><parameter>int C1, int C2, bool &amp;f1, bool &amp;f2, bool &amp;self</parameter><location id="id2" x="-160" y="-376"><name x="-170" y="-406">Waiting</name></location><location id="id3" x="-160" y="-72"><name x="-176" y="-56">Done</name></location><location id="id4" x="-48" y="-176"><name x="-32" y="-184">CPU2_executing</name></location><location id="id5" x="-264" y="-176"><name x="-400" y="-184">CPU1_executing</name></location><location id="id6" x="-160" y="-280"><name x="-144" y="-296">Ready</name></location><init ref="id2"/><transition><source ref="id2"/><target ref="id6"/><label kind="guard" x="-220" y="-358">f1 &amp; f2</label></transition><transition><source ref="id5"/><target ref="id3"/><label kind="synchronisation" x="-336" y="-128">CPU1_done?</label><label kind="assignment" x="-328" y="-104">done_counter++,
self = true</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="synchronisation" x="-48" y="-128">CPU2_done?</label><label kind="assignment" x="-88" y="-104">done_counter++,
self = true</label></transition><transition><source ref="id6"/><target ref="id4"/><label kind="synchronisation" x="-104" y="-264">CPU2_use!</label><label kind="assignment" x="-72" y="-240">CPU2_C=C2</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="-272" y="-272">CPU1_use!</label><label kind="assignment" x="-312" y="-248">CPU1_C=C1</label></transition></template><system>// Place template instantiations here.
CPU1 = CPU(CPU1_use, CPU1_done, CPU1_C);
CPU2 = CPU(CPU2_use, CPU2_done, CPU2_C);

// First system
// JobA = Job(3, 4, flag, flag, flagA);
// JobB = Job(3, 2, flag, flag, flagB);
// JobC = Job(6, 5, flagA, flagB, flagC);
// JobD = Job(3, 3, flagB, flag, flagD);
// JobE = Job(2, 1, flagD, flag, flagE);
// List one or more processes to be composed into a system.
// system JobA, JobB, JobC, JobD, JobE, CPU1, CPU2;

// Second system
JobA = Job(1, 2, flag, flag, flagA);
JobB = Job(4, 2, flag, flag, flagB);
JobC = Job(5, 5, flagA, flag, flagC);
JobD = Job(2, 4, flagA, flagB, flagD);
JobE = Job(3, 7, flagB, flag, flagE);
JobF = Job(7, 8, flagC, flag, flagF);
JobG = Job(1, 1, flagC, flagD, flagG);
JobH = Job(5, 2, flagG, flagE, flagH);
JobI = Job(3, 1, flagE, flag, flagI);
// List one or more processes to be composed into a system.
system JobA, JobB, JobC, JobD, JobE, JobF, JobG, JobH, JobI, CPU1, CPU2;</system></nta>